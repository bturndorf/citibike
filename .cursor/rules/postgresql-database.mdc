---
description: 
globs: 
alwaysApply: false
---
# PostgreSQL Database Rules

Rules for ensuring this CitiBike project uses PostgreSQL instead of SQLite for all database operations, including terminal commands, scripts, and local development.

<rule>
name: postgresql_database_usage
description: Standards for using PostgreSQL instead of SQLite in the CitiBike project - comprehensive coverage for all database interactions
filters:
  # Match Python files that might contain database code
  - type: file_extension
    pattern: "\\.py$"
  # Match configuration files
  - type: file_extension
    pattern: "\\.(json|yaml|yml|ini|cfg|env|txt)$"
  # Match SQL files
  - type: file_extension
    pattern: "\\.sql$"
  # Match database-related content
  - type: content
    pattern: "(sqlite|\.db|sqlite3|SQLite)"
  # Match database connection strings
  - type: content
    pattern: "(DATABASE_URL|db_url|connection_string)"
  # Match terminal commands
  - type: content
    pattern: "(sqlite3|\.db|\.sqlite)"
  # Match file creation and modification events
  - type: event
    pattern: "file_create|file_modify"
  # Match terminal command execution
  - type: event
    pattern: "terminal_command"

actions:
  - type: reject
    conditions:
      - pattern: "sqlite://|\.db$|sqlite3\.|SQLite|sqlite3 "
        message: "This project uses PostgreSQL, not SQLite. Use Railway PostgreSQL database or local PostgreSQL instead."
      - pattern: "sqlite3.*\.db|\.tables|\.schema|\.dump"
        message: "Use PostgreSQL commands (psql) and syntax instead of SQLite commands. Use \dt for tables, \d for schema, pg_dump for backups."
      - pattern: "import sqlite3|sqlite3\.connect"
        message: "Use PostgreSQL libraries (psycopg2, asyncpg) and SQLAlchemy instead of sqlite3. Import psycopg2 or use SQLAlchemy with DATABASE_URL."

  - type: suggest
    message: |
      When working with databases in this CitiBike project:

      ## PostgreSQL Database Standards - Comprehensive

      ### 1. Database Configuration

      **Use Railway PostgreSQL:**
      - Database URL: `DATABASE_URL` environment variable from Railway
      - Connection: Use `psycopg2` or `asyncpg` for Python
      - Never use SQLite files (`.db` files)
      - Never use `sqlite://` connection strings
      - Never use `sqlite3` terminal commands

      **Correct Database Setup:**
      ```python
      # ✅ Correct - PostgreSQL with Railway
      import os
      from sqlalchemy import create_engine
      
      DATABASE_URL = os.getenv("DATABASE_URL")
      engine = create_engine(DATABASE_URL)
      ```

      **❌ Incorrect - SQLite (Don't use):**
      ```python
      # Wrong - SQLite file
      engine = create_engine("sqlite:///dev.db")
      
      # Wrong - SQLite in-memory
      engine = create_engine("sqlite:///:memory:")
      
      # Wrong - sqlite3 terminal command
      # sqlite3 backend/dev.db ".tables"
      ```

      ### 2. Terminal Commands - PostgreSQL Only

      **❌ Forbidden SQLite Commands:**
      ```bash
      # Never use these:
      sqlite3 backend/dev.db ".tables"
      sqlite3 backend/dev.db "SELECT * FROM stations"
      sqlite3 backend/dev.db ".schema"
      sqlite3 backend/dev.db ".dump"
      ```

      **✅ Correct PostgreSQL Commands:**
      ```bash
      # Use these instead:
      # Connect to Railway PostgreSQL
      railway connect
      psql $DATABASE_URL
      
      # Or for local PostgreSQL
      psql postgresql://localhost:5432/citibike_dev
      
      # Common PostgreSQL commands:
      \dt                    # List tables (equivalent to .tables)
      \d stations           # Describe table (equivalent to .schema)
      SELECT * FROM stations LIMIT 5;  # Query data
      \l                    # List databases
      \q                    # Quit psql
      ```

      ### 3. PostgreSQL-Specific Syntax and Tools

      **Always use PostgreSQL syntax and tools:**
      ```bash
      # ✅ Correct - PostgreSQL commands
      psql dev -c "SELECT COUNT(*) FROM trips;"           # Query with psql
      psql dev -c "\dt"                                   # List tables
      psql dev -c "\d stations"                          # Describe table
      psql dev -c "SELECT version();"                    # Check PostgreSQL version
      
      # ✅ Correct - PostgreSQL-specific syntax
      SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'stations');
      SELECT COUNT(*) FROM stations;
      SELECT * FROM stations LIMIT 5;
      
      # ❌ Wrong - SQLite commands and syntax
      # sqlite3 dev.db ".tables"
      # sqlite3 dev.db "SELECT COUNT(*) FROM stations;"
      # sqlite3 dev.db ".schema stations"
      ```

      **PostgreSQL vs SQLite command mapping:**
      - SQLite `.tables` → PostgreSQL `\dt`
      - SQLite `.schema` → PostgreSQL `\d table_name`
      - SQLite `.dump` → PostgreSQL `pg_dump`
      - SQLite `sqlite3 file.db` → PostgreSQL `psql database_name`

      ### 4. Database Inspection and Debugging

      **When debugging database issues:**
      ```bash
      # ✅ Correct - Use PostgreSQL
      railway connect
      psql $DATABASE_URL -c "\dt"
      psql $DATABASE_URL -c "SELECT COUNT(*) FROM stations;"
      psql $DATABASE_URL -c "SELECT * FROM stations LIMIT 5;"
      
      # ❌ Wrong - Don't use SQLite
      # sqlite3 backend/dev.db ".tables"
      # sqlite3 backend/dev.db "SELECT COUNT(*) FROM stations;"
      ```

      **Database connection testing:**
      ```python
      # ✅ Correct - Test PostgreSQL connection
      import psycopg2
      import os
      
      try:
          conn = psycopg2.connect(os.getenv("DATABASE_URL"))
          cursor = conn.cursor()
          cursor.execute("SELECT version();")
          print("PostgreSQL connected successfully")
          conn.close()
      except Exception as e:
          print(f"PostgreSQL connection failed: {e}")
      ```

      ### 5. Script Database Operations

      **Database inspection in scripts:**
      ```python
      # ✅ Correct - PostgreSQL table inspection
      import os
      from sqlalchemy import create_engine, text
      
      DATABASE_URL = os.getenv("DATABASE_URL")
      engine = create_engine(DATABASE_URL)
      
      with engine.connect() as conn:
          # Check if table exists
          result = conn.execute(text("""
              SELECT EXISTS (
                  SELECT FROM information_schema.tables 
                  WHERE table_name = 'stations'
              );
          """))
          table_exists = result.scalar()
          
          if table_exists:
              # Get table info
              result = conn.execute(text("SELECT COUNT(*) FROM stations"))
              count = result.scalar()
              print(f"Stations table has {count} records")
          else:
              print("Stations table does not exist")
      ```

      **❌ Wrong - SQLite table inspection:**
      ```python
      # Don't use this:
      import sqlite3
      conn = sqlite3.connect("backend/dev.db")
      cursor = conn.cursor()
      cursor.execute("SELECT COUNT(*) FROM stations")
      ```

      ### 6. Database File Management

      **Database files to avoid:**
      - `dev.db` (SQLite file)
      - `test.db` (SQLite file)
      - `*.db` files (any SQLite database)
      - `sqlite3` imports or usage
      - Any SQLite database files

      **Database files to use:**
      - Railway PostgreSQL database (configured via `DATABASE_URL`)
      - Database migration files (Alembic)
      - Database schema files (SQL DDL)
      - PostgreSQL dump files (`.sql`)

      ### 7. Environment Configuration

      **Required Environment Variables:**
      ```bash
      # Railway PostgreSQL (production)
      DATABASE_URL=postgresql://user:password@host:port/database
      
      # Local development (if needed)
      DATABASE_URL=postgresql://localhost:5432/citibike_dev
      ```

      **Environment File Structure:**
      ```
      backend/
      ├── .env.example          # Template with PostgreSQL config
      ├── .env                  # Local development (gitignored)
      └── railway.json          # Railway deployment config
      ```

      ### 8. Database Dependencies

      **Required Python Packages:**
      ```python
      # requirements.txt
      psycopg2-binary==2.9.9    # PostgreSQL adapter
      sqlalchemy==2.0.23        # ORM
      alembic==1.12.1           # Database migrations
      ```

      **Avoid SQLite packages:**
      ```python
      # Don't include these
      # sqlite3  # Built-in, but don't use
      ```

      ### 9. Database Connection Patterns

      **FastAPI Database Setup:**
      ```python
      # backend/main.py
      from sqlalchemy import create_engine
      from sqlalchemy.orm import sessionmaker
      import os
      
      DATABASE_URL = os.getenv("DATABASE_URL")
      engine = create_engine(DATABASE_URL)
      SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
      ```

      **SQLAlchemy Models:**
      ```python
      # backend/models.py
      from sqlalchemy import Column, Integer, String, DateTime, Float
      from sqlalchemy.ext.declarative import declarative_base
      
      Base = declarative_base()
      
      class Station(Base):
          __tablename__ = "stations"
          id = Column(Integer, primary_key=True, index=True)
          # ... other fields
      ```

      ### 10. Database Migrations

      **Alembic Configuration:**
      ```python
      # backend/alembic.ini
      sqlalchemy.url = %(DATABASE_URL)s
      ```

      **Migration Commands:**
      ```bash
      # Create migration
      cd backend && alembic revision --autogenerate -m "Add stations table"
      
      # Apply migration
      cd backend && alembic upgrade head
      ```

      ### 11. Testing Database Setup

      **Test Database Configuration:**
      ```python
      # backend/tests/conftest.py
      import pytest
      from sqlalchemy import create_engine
      from sqlalchemy.orm import sessionmaker
      import os
      
      @pytest.fixture
      def test_db():
          # Use test PostgreSQL database, not SQLite
          test_db_url = os.getenv("TEST_DATABASE_URL", "postgresql://localhost:5432/citibike_test")
          engine = create_engine(test_db_url)
          # ... test setup
      ```

      **Test Environment Variables:**
      ```bash
      # .env.test
      TEST_DATABASE_URL=postgresql://localhost:5432/citibike_test
      ```

      ### 12. Railway Deployment

      **Railway Configuration:**
      ```json
      // railway.json
      {
        "build": {
          "builder": "nixpacks"
        },
        "deploy": {
          "startCommand": "uvicorn main:app --host 0.0.0.0 --port $PORT",
          "healthcheckPath": "/health",
          "healthcheckTimeout": 100,
          "restartPolicyType": "ON_FAILURE"
        }
      }
      ```

      **Environment Variables in Railway:**
      - `DATABASE_URL`: Automatically provided by Railway PostgreSQL
      - `PORT`: Railway port configuration
      - `RAILWAY_ENVIRONMENT`: Deployment environment

      ### 13. Database Schema Management

      **Schema Files:**
      ```sql
      -- backend/schema/01_stations.sql
      CREATE TABLE stations (
          id SERIAL PRIMARY KEY,
          station_id VARCHAR(50) UNIQUE NOT NULL,
          name VARCHAR(255) NOT NULL,
          latitude DECIMAL(10, 8) NOT NULL,
          longitude DECIMAL(11, 8) NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      ```

      **Index Creation:**
      ```sql
      -- backend/schema/02_indexes.sql
      CREATE INDEX idx_stations_station_id ON stations(station_id);
      CREATE INDEX idx_stations_location ON stations(latitude, longitude);
      ```

      ### 14. Data Types and Constraints

      **PostgreSQL-Specific Features:**
      ```python
      # Use PostgreSQL data types
      from sqlalchemy import Column, Integer, String, DateTime, Float, Text, Boolean
      
      class Trip(Base):
          __tablename__ = "trips"
          id = Column(Integer, primary_key=True, index=True)
          start_time = Column(DateTime, nullable=False)
          end_time = Column(DateTime, nullable=False)
          duration = Column(Integer, nullable=False)  # seconds
          distance = Column(Float)  # kilometers
          notes = Column(Text)  # unlimited text
          is_active = Column(Boolean, default=True)
      ```

      ### 15. Performance Considerations

      **PostgreSQL Optimizations:**
      - Use appropriate indexes for query patterns
      - Use connection pooling for web applications
      - Use prepared statements for repeated queries
      - Monitor query performance with `EXPLAIN ANALYZE`

      **Connection Pooling:**
      ```python
      # backend/database.py
      from sqlalchemy import create_engine
      from sqlalchemy.pool import QueuePool
      
      engine = create_engine(
          DATABASE_URL,
          poolclass=QueuePool,
          pool_size=10,
          max_overflow=20,
          pool_pre_ping=True
      )
      ```

      ### 16. Error Handling

      **Database Error Handling:**
      ```python
      from sqlalchemy.exc import SQLAlchemyError
      from psycopg2.errors import UniqueViolation, ForeignKeyViolation
      
      try:
          db.add(new_station)
          db.commit()
      except UniqueViolation:
          db.rollback()
          raise HTTPException(status_code=400, detail="Station already exists")
      except SQLAlchemyError as e:
          db.rollback()
          raise HTTPException(status_code=500, detail="Database error")
      ```

      ### 17. Backup and Recovery

      **Database Backups:**
      - Use Railway's built-in backup features
      - Set up automated backups via Railway dashboard
      - Store backup files in `data/backups/` directory
      - Never rely on local SQLite files for backups

      **Backup Commands:**
      ```bash
      # Railway PostgreSQL backup (via Railway CLI)
      railway connect
      pg_dump $DATABASE_URL > data/backups/backup_$(date +%Y%m%d).sql
      ```

      ### 18. Migration from SQLite

      **If migrating from SQLite:**
      1. Export data from SQLite: `sqlite3 dev.db .dump > data/backup.sql`
      2. Convert SQLite schema to PostgreSQL
      3. Import data to PostgreSQL
      4. Update all connection strings
      5. Remove SQLite files
      6. Update tests to use PostgreSQL

      **Schema Conversion:**
      ```sql
      -- Convert SQLite INTEGER PRIMARY KEY to PostgreSQL SERIAL
      -- SQLite: id INTEGER PRIMARY KEY
      -- PostgreSQL: id SERIAL PRIMARY KEY
      
      -- Convert SQLite TEXT to PostgreSQL VARCHAR or TEXT
      -- SQLite: name TEXT
      -- PostgreSQL: name VARCHAR(255) or name TEXT
      ```

      ### 19. Startup Script Database Handling

      **Database setup in startup scripts:**
      ```python
      # ✅ Correct - PostgreSQL table inspection
      def check_database_tables():
          import os
          from sqlalchemy import create_engine, text
          
          DATABASE_URL = os.getenv("DATABASE_URL")
          if not DATABASE_URL:
              print("❌ DATABASE_URL not set")
              return False
          
          try:
              engine = create_engine(DATABASE_URL)
              with engine.connect() as conn:
                  # Check if stations table exists
                  result = conn.execute(text("""
                      SELECT EXISTS (
                          SELECT FROM information_schema.tables 
                          WHERE table_name = 'stations'
                      );
                  """))
                  table_exists = result.scalar()
                  
                  if table_exists:
                      result = conn.execute(text("SELECT COUNT(*) FROM stations"))
                      count = result.scalar()
                      print(f"✅ Stations table exists with {count} records")
                      return True
                  else:
                      print("❌ Stations table does not exist")
                      return False
          except Exception as e:
              print(f"❌ Database connection failed: {e}")
              return False
      ```

      **❌ Wrong - SQLite table inspection:**
      ```python
      # Don't use this in startup scripts:
      import sqlite3
      conn = sqlite3.connect("backend/dev.db")
      cursor = conn.cursor()
      cursor.execute("SELECT COUNT(*) FROM stations")
      ```

      ### 20. Local Development Database

      **Local PostgreSQL Setup:**
      ```bash
      # Install PostgreSQL locally (macOS)
      brew install postgresql
      brew services start postgresql
      
      # Create local database
      createdb citibike_dev
      
      # Set local environment
      export DATABASE_URL=postgresql://localhost:5432/citibike_dev
      ```

      **Local Database Commands:**
      ```bash
      # Connect to local PostgreSQL
      psql postgresql://localhost:5432/citibike_dev
      
      # List tables
      \dt
      
      # Query data
      SELECT COUNT(*) FROM stations;
      
      # Describe table
      \d stations
      ```

      ### 21. Database Troubleshooting

      **When database issues occur:**
      1. **Check connection**: Verify `DATABASE_URL` is set correctly
      2. **Test connection**: Use `psql` or Python connection test
      3. **Check tables**: Use PostgreSQL commands, not SQLite
      4. **Verify schema**: Use `\dt` and `\d table_name` in PostgreSQL
      5. **Check logs**: Look for PostgreSQL error messages
      6. **Test queries**: Use PostgreSQL syntax, not SQLite

      **Common troubleshooting commands:**
      ```bash
      # Test PostgreSQL connection
      psql $DATABASE_URL -c "SELECT version();"
      
      # Check if database exists
      psql $DATABASE_URL -c "\l"
      
      # List tables
      psql $DATABASE_URL -c "\dt"
      
      # Check table structure
      psql $DATABASE_URL -c "\d stations"
      
      # Test query
      psql $DATABASE_URL -c "SELECT COUNT(*) FROM stations;"
      ```

examples:
  - input: |
      # Wrong - SQLite connection
      engine = create_engine("sqlite:///dev.db")
      
      # Should be:
      engine = create_engine(os.getenv("DATABASE_URL"))
    output: "PostgreSQL connection configured correctly"

  - input: |
      # Wrong - SQLite file creation
      import sqlite3
      conn = sqlite3.connect("test.db")
      
      # Should be:
      from sqlalchemy import create_engine
      engine = create_engine(os.getenv("DATABASE_URL"))
    output: "PostgreSQL database connection established"

  - input: |
      # Wrong - SQLite terminal command
      sqlite3 backend/dev.db ".tables"
      
      # Should be:
      psql $DATABASE_URL -c "\dt"
    output: "PostgreSQL table listing command used"

  - input: |
      # Wrong - SQLite in requirements
      sqlite3
      
      # Should be:
      psycopg2-binary==2.9.9
    output: "PostgreSQL dependency added correctly"

  - input: |
      # Wrong - SQLite table inspection in script
      import sqlite3
      conn = sqlite3.connect("backend/dev.db")
      cursor = conn.cursor()
      cursor.execute("SELECT COUNT(*) FROM stations")
      
      # Should be:
      from sqlalchemy import create_engine, text
      engine = create_engine(os.getenv("DATABASE_URL"))
      with engine.connect() as conn:
          result = conn.execute(text("SELECT COUNT(*) FROM stations"))
          count = result.scalar()
    output: "PostgreSQL table inspection implemented correctly"

  - input: |
      # Wrong - SQLite database inspection commands
      sqlite3 dev.db ".tables"
      sqlite3 dev.db "SELECT COUNT(*) FROM trips;"
      sqlite3 dev.db ".schema stations"
      
      # Should be:
      psql dev -c "\dt"
      psql dev -c "SELECT COUNT(*) FROM trips;"
      psql dev -c "\d stations"
    output: "PostgreSQL database inspection commands used correctly"

metadata:
  priority: high
  version: 2.0
  tags: ["database", "postgresql", "railway", "sqlite-migration", "deployment", "configuration", "terminal-commands", "local-development", "startup-scripts"]
</rule>
